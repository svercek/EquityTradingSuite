@model EquityPerformanceTracker.Core.Models.Portfolio
@{
    ViewData["Title"] = Model.Name;
    var transactions = ViewBag.Transactions as List<EquityPerformanceTracker.Core.Models.Transaction> ?? new List<EquityPerformanceTracker.Core.Models.Transaction>();
}

@* Anti-forgery token *@
<form style="display:none;">
    @Html.AntiForgeryToken()
</form>

<div class="container mt-4">
    <!-- Portfolio Header -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h2>@Model.Name</h2>
            <p class="text-muted">@Model.Description</p>
        </div>
        <div class="col-md-4 text-md-end">
            <a asp-action="Index" class="btn btn-outline-secondary">‚Üê Back to Portfolios</a>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Portfolio Summary Cards -->    <!-- Portfolio Summary Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title text-muted">Current Value</h5>
                    <h3 class="text-primary">$@Model.CurrentValue.ToString("N2")</h3>
                    <small class="text-muted">Market value today</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title text-muted">Total Invested</h5>
                    <h3>$@Model.TotalInvested.ToString("N2")</h3>
                    <small class="text-muted">Money actually spent</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title text-muted">Total Gain/Loss</h5>
                    <h3 class="@(Model.ActualTotalGainLoss >= 0 ? "text-success" : "text-danger")">
                        $@Model.ActualTotalGainLoss.ToString("N2")
                    </h3>
                    <small class="text-muted">Profit/loss on investment</small>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center">
                <div class="card-body">
                    <h5 class="card-title text-muted">Return %</h5>
                    <h3 class="@(Model.ActualGainLossPercentage >= 0 ? "text-success" : "text-danger")">
                        @Model.ActualGainLossPercentage.ToString("N2")%
                    </h3>
                    <small class="text-muted">Investment performance</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Optional: Show Original Plan vs Reality -->
    @if (Math.Abs(Model.InitialValue - Model.TotalInvested) > 1)
    {
        <div class="alert alert-info mb-4">
            <strong>Portfolio Plan vs Reality:</strong>
            You planned to invest $@Model.InitialValue.ToString("N2") but actually invested $@Model.TotalInvested.ToString("N2")
            (@(Model.TotalInvested > Model.InitialValue ? "+" : "")@((Model.TotalInvested - Model.InitialValue).ToString("N2")) difference)
        </div>
    }
    <!-- Holdings Section -->
    <div class="row">
        <div class="col-md-8">
            <!-- ACTIVE HOLDINGS -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    @{
                        var activeHoldings = Model.Holdings.Where(h => h.RemainingShares > 0).ToList();
                    }
                    <h5 class="mb-0">Active Holdings (@activeHoldings.Count)</h5>
                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addHoldingModal">
                        + Add Stock
                    </button>
                </div>
                <div class="card-body">
                    @if (activeHoldings.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Symbol</th>
                                        <th>Company</th>
                                        <th class="text-end">Remaining Shares</th>
                                        <th class="text-end">Purchase Price</th>
                                        <th class="text-end">Current Price</th>
                                        <th class="text-end">Market Value</th>
                                        <th class="text-end">Gain/Loss</th>
                                        <th class="text-end">%</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var holding in activeHoldings)
                                    {
                                        <tr>
                                            <td><strong>@holding.Symbol</strong></td>
                                            <td>@holding.CompanyName</td>
                                            <td class="text-end">@holding.RemainingShares</td>
                                            <td class="text-end">$@holding.PurchasePrice.ToString("N2")</td>
                                            <td class="text-end">$@holding.CurrentPrice.ToString("N2")</td>
                                            <td class="text-end">$@holding.TotalValue.ToString("N2")</td>
                                            <td class="text-end @(holding.GainLoss >= 0 ? "text-success" : "text-danger")">
                                                $@holding.GainLoss.ToString("N2")
                                            </td>
                                            <td class="text-end @(holding.GainLossPercentage >= 0 ? "text-success" : "text-danger")">
                                                @holding.GainLossPercentage.ToString("N1")%
                                            </td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm">
                                                    <a asp-action="EditHolding" asp-route-id="@holding.Id" 
                                                       class="btn btn-outline-primary btn-sm" title="Edit">
                                                        ‚úèÔ∏è
                                                    </a>
                                                    <button type="button" class="btn btn-outline-success btn-sm" 
                                                            onclick="showSellModal(@holding.Id, '@holding.Symbol', @holding.RemainingShares)" title="Sell">
                                                        üí∞
                                                    </button>
                                                    <button type="button" class="btn btn-outline-danger btn-sm" 
                                                            onclick="deleteHolding(@holding.Id, '@holding.Symbol')" title="Delete">
                                                        üóëÔ∏è
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No active holdings</h5>
                            <p>Add your first stock to start tracking performance</p>
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addHoldingModal">
                                Add Your First Stock
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- SOLD STOCKS SECTION -->
            @if (transactions.Any())
            {
                <div class="card">
                    <div class="card-header" style="background-color: #f8f9fa; border-bottom: 3px solid #dee2e6;">
                        <h5 class="mb-0 text-muted"><strong>SOLD STOCKS</strong></h5>
                    </div>
                    <div class="card-body" style="background-color: #fafbfc;">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead class="table-secondary">
                                    <tr>
                                        <th>Sale Date</th>
                                        <th>Symbol</th>
                                        <th class="text-end">Qty Sold</th>
                                        <th class="text-end">Original Cost</th>
                                        <th class="text-end">Sale Price</th>
                                        <th class="text-end">Total Proceeds</th>
                                        <th class="text-end">Realized Gain/Loss</th>
                                        <th class="text-end">Return %</th>
                                        <th>Notes</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var transaction in transactions)
                                    {
                                        <tr>
                                            <td>@transaction.TransactionDate.ToString("MM/dd/yyyy")</td>
                                            <td><strong>@transaction.Symbol</strong></td>
                                            <td class="text-end">@transaction.Shares</td>
                                            <td class="text-end">$@transaction.PurchasePrice.ToString("N2")</td>
                                            <td class="text-end">$@transaction.Price.ToString("N2")</td>
                                            <td class="text-end">$@transaction.TotalValue.ToString("N2")</td>
                                            <td class="text-end @(transaction.GainLoss >= 0 ? "text-success" : "text-danger")">
                                                $@transaction.GainLoss.ToString("N2")
                                            </td>
                                            <td class="text-end @(transaction.GainLossPercentage >= 0 ? "text-success" : "text-danger")">
                                                @transaction.GainLossPercentage.ToString("N1")%
                                            </td>
                                            <td>@transaction.Notes</td>
                                            <td class="text-center">
                                                <div class="btn-group btn-group-sm">
                                                    <a asp-action="EditTransaction" asp-route-id="@transaction.Id" 
                                                       class="btn btn-outline-primary btn-sm" title="Edit Transaction">
                                                        ‚úèÔ∏è
                                                    </a>
                                                    <button type="button" class="btn btn-outline-danger btn-sm" 
                                                            onclick="deleteTransaction(@transaction.Id, '@transaction.Symbol')" title="Delete Transaction">
                                                        üóëÔ∏è
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Portfolio Info Sidebar -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Portfolio Information</h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <small class="text-muted">Created</small>
                        <div>@Model.CreatedDate.ToString("MMM dd, yyyy")</div>
                    </div>
                    <div class="mb-3">
                        <small class="text-muted">Last Updated</small>
                        <div>@Model.LastUpdated.ToString("MMM dd, yyyy h:mm tt")</div>
                    </div>
                    <div class="mb-3">
                        <small class="text-muted">Number of Holdings</small>
                        <div>@activeHoldings.Count stocks</div>
                    </div>
                    <div class="d-grid">
                        <button class="btn btn-outline-primary btn-sm" onclick="updatePrices(@Model.Id)">
                            üîÑ Update Prices
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Holding Modal -->
<div class="modal fade" id="addHoldingModal" tabindex="-1" aria-labelledby="addHoldingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="AddHolding" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="addHoldingModalLabel">Add Stock Holding</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="portfolioId" value="@Model.Id" />
                    
                    <div class="mb-3">
                        <label for="symbol" class="form-label">Stock Symbol *</label>
                        <input type="text" class="form-control" name="symbol" id="symbol" 
                               placeholder="e.g., AAPL" required style="text-transform: uppercase" />
                        <div class="form-text">Enter the stock ticker symbol (e.g., AAPL, MSFT, GOOGL)</div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="shares" class="form-label">Number of Shares *</label>
                        <input type="number" class="form-control" name="shares" id="shares" 
                               min="1" step="1" placeholder="100" required />
                    </div>
                    
                    <div class="mb-3">
                        <label for="purchasePrice" class="form-label">Purchase Price per Share *</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" name="purchasePrice" id="purchasePrice" 
                                   min="0.01" step="0.01" placeholder="150.00" required />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Holding</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Sell Modal -->
<div class="modal fade" id="sellModal" tabindex="-1" aria-labelledby="sellModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sellModalLabel">Sell Shares</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="sellForm">
                    <input type="hidden" id="sellHoldingId" />
                    
                    <div class="mb-3">
                        <label class="form-label">Stock Symbol</label>
                        <input type="text" id="sellSymbol" class="form-control" readonly />
                    </div>
                    
                    <div class="mb-3">
                        <label for="sellShares" class="form-label">Shares to Sell *</label>
                        <input type="number" class="form-control" id="sellShares" min="1" required />
                        <div class="form-text">Available shares: <span id="availableShares"></span></div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sellPrice" class="form-label">Sale Price per Share *</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control" id="sellPrice" step="0.01" min="0.01" required />
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sellDate" class="form-label">Sale Date *</label>
                        <input type="date" class="form-control" id="sellDate" required />
                    </div>
                    
                    <div class="mb-3">
                        <label for="sellNotes" class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" id="sellNotes" rows="2" placeholder="Reason for sale..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="submitSell()">Sell Shares</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-uppercase stock symbols
        document.getElementById('symbol').addEventListener('input', function(e) {
            e.target.value = e.target.value.toUpperCase();
        });

        function showSellModal(holdingId, symbol, availableShares) {
            document.getElementById('sellHoldingId').value = holdingId;
            document.getElementById('sellSymbol').value = symbol;
            document.getElementById('availableShares').textContent = availableShares;
            document.getElementById('sellShares').max = availableShares;
            document.getElementById('sellDate').value = new Date().toISOString().split('T')[0];
            
            var modal = new bootstrap.Modal(document.getElementById('sellModal'));
            modal.show();
        }

        function submitSell() {
            const form = document.getElementById('sellForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const data = {
                holdingId: parseInt(document.getElementById('sellHoldingId').value),
                shares: parseInt(document.getElementById('sellShares').value),
                price: parseFloat(document.getElementById('sellPrice').value),
                saleDate: document.getElementById('sellDate').value,
                notes: document.getElementById('sellNotes').value || ""
            };

            fetch('/Portfolio/SellShares', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('sellModal')).hide();
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error selling shares. Please try again.');
            });
        }

        function updatePrices(portfolioId) {
            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = '‚è≥ Updating...';
            button.disabled = true;

            fetch(`/Portfolio/UpdatePrices/${portfolioId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error updating prices: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error updating prices. Please try again.');
            })
            .finally(() => {
                button.innerHTML = originalText;
                button.disabled = false;
            });
        }

        function deleteHolding(holdingId, symbol) {
            if (confirm(`Are you sure you want to delete ${symbol} from this portfolio?`)) {
                fetch(`/Portfolio/DeleteHolding/${holdingId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error deleting holding: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Error deleting holding. Please try again.');
                });
            }
        }

        function deleteTransaction(transactionId, symbol) {
            if (confirm(`Are you sure you want to delete this ${symbol} sale transaction?`)) {
                fetch(`/Portfolio/DeleteTransaction/${transactionId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error deleting transaction: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Error deleting transaction. Please try again.');
                });
            }
        }
    </script>
}